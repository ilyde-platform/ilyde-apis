# coding: utf-8
#
# Copyright (c) 2020-2021 Hopenly srl.
#
# This file is part of Ilyde.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class HardwareTierSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cores=None, memory=None, gpu=None, instancegroup=None, deployment=None, id=None, is_default=False):  # noqa: E501
        """HardwareTierSerializer - a model defined in OpenAPI

        :param name: The name of this HardwareTierSerializer.  # noqa: E501
        :type name: str
        :param cores: The cores of this HardwareTierSerializer.  # noqa: E501
        :type cores: int
        :param memory: The memory of this HardwareTierSerializer.  # noqa: E501
        :type memory: int
        :param gpu: The gpu of this HardwareTierSerializer.  # noqa: E501
        :type gpu: int
        :param instancegroup: The instancegroup of this HardwareTierSerializer.  # noqa: E501
        :type instancegroup: str
        :param deployment: The deployment of this HardwareTierSerializer.  # noqa: E501
        :type deployment: bool
        :param id: The id of this HardwareTierSerializer.  # noqa: E501
        :type id: str
        :param is_default: The is_default of this HardwareTierSerializer.  # noqa: E501
        :type is_default: bool
        """
        self.openapi_types = {
            'name': str,
            'cores': int,
            'memory': int,
            'gpu': int,
            'instancegroup': str,
            'deployment': bool,
            'id': str,
            'is_default': bool,
        }

        self.attribute_map = {
            'name': 'name',
            'cores': 'cores',
            'memory': 'memory',
            'gpu': 'gpu',
            'instancegroup': 'instancegroup',
            'deployment': 'deployment',
            'id': 'id',
            'is_default': 'is_default'
        }

        self._name = name
        self._cores = cores
        self._memory = memory
        self._gpu = gpu
        self._instancegroup = instancegroup
        self._deployment = deployment
        self._id = id
        self._is_default = is_default

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HardwareTier of this HardwareTierSerializer.  # noqa: E501
        :rtype: HardwareTierSerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HardwareTierSerializer.


        :return: The name of this HardwareTierSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HardwareTierSerializer.


        :param name: The name of this HardwareTierSerializer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cores(self):
        """Gets the cores of this HardwareTierSerializer.


        :return: The cores of this HardwareTierSerializer.
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this HardwareTierSerializer.


        :param cores: The cores of this HardwareTierSerializer.
        :type cores: int
        """
        if cores is None:
            raise ValueError("Invalid value for `cores`, must not be `None`")  # noqa: E501

        self._cores = cores

    @property
    def memory(self):
        """Gets the memory of this HardwareTierSerializer.


        :return: The memory of this HardwareTierSerializer.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this HardwareTierSerializer.


        :param memory: The memory of this HardwareTierSerializer.
        :type memory: int
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    @property
    def gpu(self):
        """Gets the gpu of this HardwareTierSerializer.


        :return: The gpu of this HardwareTierSerializer.
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this HardwareTierSerializer.


        :param gpu: The gpu of this HardwareTierSerializer.
        :type gpu: int
        """
        if gpu is None:
            raise ValueError("Invalid value for `gpu`, must not be `None`")  # noqa: E501

        self._gpu = gpu

    @property
    def instancegroup(self):
        """Gets the instancegroup of this HardwareTierSerializer.


        :return: The instancegroup of this HardwareTierSerializer.
        :rtype: str
        """
        return self._instancegroup

    @instancegroup.setter
    def instancegroup(self, instancegroup):
        """Sets the instancegroup of this HardwareTierSerializer.


        :param instancegroup: The instancegroup of this HardwareTierSerializer.
        :type instancegroup: str
        """
        if instancegroup is None:
            raise ValueError("Invalid value for `instancegroup`, must not be `None`")  # noqa: E501

        self._instancegroup = instancegroup

    @property
    def deployment(self):
        """Gets the deployment of this HardwareTierSerializer.


        :return: The deployment of this HardwareTierSerializer.
        :rtype: bool
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this HardwareTierSerializer.


        :param deployment: The deployment of this HardwareTierSerializer.
        :type deployment: bool
        """
        if deployment is None:
            raise ValueError("Invalid value for `deployment`, must not be `None`")  # noqa: E501

        self._deployment = deployment

    @property
    def id(self):
        """Gets the id of this HardwareTierSerializer.


        :return: The id of this HardwareTierSerializer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HardwareTierSerializer.


        :param id: The id of this HardwareTierSerializer.
        :type id: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this HardwareTierSerializer.


        :return: The is_default of this HardwareTierSerializer.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this HardwareTierSerializer.


        :param is_default: The is_default of this HardwareTierSerializer.
        :type is_default: bool
        """

        self._is_default = is_default
