# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class PageLimitListSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total=None, page=None, limit=None, data=None):  # noqa: E501
        """PageLimitListSerializer - a model defined in OpenAPI

        :param total: The total of this PageLimitListSerializer.  # noqa: E501
        :type total: int
        :param page: The page of this PageLimitListSerializer.  # noqa: E501
        :type page: int
        :param limit: The limit of this PageLimitListSerializer.  # noqa: E501
        :type limit: int
        :param data: The data of this PageLimitListSerializer.  # noqa: E501
        :type data: List
        """
        self.openapi_types = {
            'total': int,
            'page': int,
            'limit': int,
            'data': List
        }

        self.attribute_map = {
            'total': 'total',
            'page': 'page',
            'limit': 'limit',
            'data': 'data'
        }

        self._total = total
        self._page = page
        self._limit = limit
        self._data = data

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PageLimitList of this PageLimitListSerializer.  # noqa: E501
        :rtype: PageLimitListSerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this PageLimitListSerializer.


        :return: The total of this PageLimitListSerializer.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PageLimitListSerializer.


        :param total: The total of this PageLimitListSerializer.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def page(self):
        """Gets the page of this PageLimitListSerializer.


        :return: The page of this PageLimitListSerializer.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PageLimitListSerializer.


        :param page: The page of this PageLimitListSerializer.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def limit(self):
        """Gets the limit of this PageLimitListSerializer.


        :return: The limit of this PageLimitListSerializer.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PageLimitListSerializer.


        :param limit: The limit of this PageLimitListSerializer.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def data(self):
        """Gets the data of this PageLimitListSerializer.


        :return: The data of this PageLimitListSerializer.
        :rtype: List
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PageLimitListSerializer.


        :param data: The data of this PageLimitListSerializer.
        :type data: List
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
