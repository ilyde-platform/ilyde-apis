# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class ProjectsListQuerySerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, state=None, member=None):  # noqa: E501
        """ProjectsListQuerySerializer - a model defined in OpenAPI

        :param id: The id of this ProjectsListQuerySerializer.  # noqa: E501
        :type id: str
        :param name: The name of this ProjectsListQuerySerializer.  # noqa: E501
        :type name: str
        :param state: The state of this ProjectsListQuerySerializer.  # noqa: E501
        :type state: str
        :param member: The member of this ProjectsListQuerySerializer.  # noqa: E501
        :type member: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'state': str,
            'member': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'state': 'state',
            'member': 'member'
        }

        self._id = id
        self._name = name
        self._state = state
        self._member = member

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _projects_list_query of this ProjectsListQuerySerializer.  # noqa: E501
        :rtype: ProjectsListQuerySerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProjectsListQuerySerializer.


        :return: The id of this ProjectsListQuerySerializer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectsListQuerySerializer.


        :param id: The id of this ProjectsListQuerySerializer.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectsListQuerySerializer.


        :return: The name of this ProjectsListQuerySerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsListQuerySerializer.


        :param name: The name of this ProjectsListQuerySerializer.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ProjectsListQuerySerializer.


        :return: The state of this ProjectsListQuerySerializer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProjectsListQuerySerializer.


        :param state: The state of this ProjectsListQuerySerializer.
        :type state: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def member(self):
        """Gets the member of this ProjectsListQuerySerializer.


        :return: The member of this ProjectsListQuerySerializer.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ProjectsListQuerySerializer.


        :param member: The member of this ProjectsListQuerySerializer.
        :type member: str
        """

        self._member = member
