# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class ModelApiSpecSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model=None, version=None, environment=None, hardware=None, stage=None):  # noqa: E501
        """ModelApiSpecSerializer - a model defined in OpenAPI

        :param model: The model of this ModelApiSpecSerializer.  # noqa: E501
        :type model: str
        :param version: The version of this ModelApiSpecSerializer.  # noqa: E501
        :type version: int
        :param environment: The environment of this ModelApiSpecSerializer.  # noqa: E501
        :type environment: str
        :param hardware: The hardware of this ModelApiSpecSerializer.  # noqa: E501
        :type hardware: str
        :param stage: The stage of this ModelApiSpecSerializer.  # noqa: E501
        :type stage: str
        """
        self.openapi_types = {
            'model': str,
            'version': int,
            'environment': str,
            'hardware': str,
            'stage': str,
        }

        self.attribute_map = {
            'model': 'model',
            'version': 'version',
            'environment': 'environment',
            'hardware': 'hardware',
            'stage': 'stage',
        }

        self._model = model
        self._version = version
        self._environment = environment
        self._hardware = hardware
        self._stage = stage

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelApi_spec of this ModelApiSpecSerializer.  # noqa: E501
        :rtype: ModelApiSpecSerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this ModelApiSpecSerializer.


        :return: The model of this ModelApiSpecSerializer.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelApiSpecSerializer.


        :param model: The model of this ModelApiSpecSerializer.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def version(self):
        """Gets the version of this ModelApiSpecSerializer.


        :return: The version of this ModelApiSpecSerializer.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelApiSpecSerializer.


        :param version: The version of this ModelApiSpecSerializer.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def environment(self):
        """Gets the environment of this ModelApiSpecSerializer.


        :return: The environment of this ModelApiSpecSerializer.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ModelApiSpecSerializer.


        :param environment: The environment of this ModelApiSpecSerializer.
        :type environment: str
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def hardware(self):
        """Gets the hardware of this ModelApiSpecSerializer.


        :return: The hardware of this ModelApiSpecSerializer.
        :rtype: str
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this ModelApiSpecSerializer.


        :param hardware: The hardware of this ModelApiSpecSerializer.
        :type hardware: str
        """
        if hardware is None:
            raise ValueError("Invalid value for `hardware`, must not be `None`")  # noqa: E501

        self._hardware = hardware

    @property
    def stage(self):
        """Gets the stage of this ModelApiSpecSerializer.


        :return: The stage of this ModelApiSpecSerializer.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this ModelApiSpecSerializer.


        :param stage: The stage of this ModelApiSpecSerializer.
        :type stage: str
        """

        self._stage = stage
