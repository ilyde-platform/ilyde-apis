# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server.serializers.file_version_serializer import FileVersionSerializer
from apis_server import util


class ProjectRevisionSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit=None, author=None, project=None, id=None, file_tree=None, create_at=None):  # noqa: E501
        """ProjectRevisionSerializer - a model defined in OpenAPI

        :param commit: The commit of this ProjectRevisionSerializer.  # noqa: E501
        :type commit: str
        :param author: The author of this ProjectRevisionSerializer.  # noqa: E501
        :type author: str
        :param project: The project of this ProjectRevisionSerializer.  # noqa: E501
        :type project: str
        :param id: The id of this ProjectRevisionSerializer.  # noqa: E501
        :type id: str
        :param file_tree: The file_tree of this ProjectRevisionSerializer.  # noqa: E501
        :type file_tree: List[FileVersionSerializer]
        :param create_at: The create_at of this ProjectRevisionSerializer.  # noqa: E501
        :type create_at: str
        """
        self.openapi_types = {
            'commit': str,
            'author': str,
            'project': str,
            'id': str,
            'file_tree': List[FileVersionSerializer],
            'create_at': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'author': 'author',
            'project': 'project',
            'id': 'id',
            'file_tree': 'file_tree',
            'create_at': 'create_at'
        }

        self._commit = commit
        self._author = author
        self._project = project
        self._id = id
        self._file_tree = file_tree
        self._create_at = create_at

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectRevision of this ProjectRevisionSerializer.  # noqa: E501
        :rtype: ProjectRevisionSerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this ProjectRevisionSerializer.


        :return: The commit of this ProjectRevisionSerializer.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this ProjectRevisionSerializer.


        :param commit: The commit of this ProjectRevisionSerializer.
        :type commit: str
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")  # noqa: E501

        self._commit = commit

    @property
    def author(self):
        """Gets the author of this ProjectRevisionSerializer.


        :return: The author of this ProjectRevisionSerializer.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ProjectRevisionSerializer.


        :param author: The author of this ProjectRevisionSerializer.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def project(self):
        """Gets the project of this ProjectRevisionSerializer.


        :return: The project of this ProjectRevisionSerializer.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectRevisionSerializer.


        :param project: The project of this ProjectRevisionSerializer.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def id(self):
        """Gets the id of this ProjectRevisionSerializer.


        :return: The id of this ProjectRevisionSerializer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectRevisionSerializer.


        :param id: The id of this ProjectRevisionSerializer.
        :type id: str
        """

        self._id = id

    @property
    def file_tree(self):
        """Gets the file_tree of this ProjectRevisionSerializer.


        :return: The file_tree of this ProjectRevisionSerializer.
        :rtype: List[FileVersionSerializer]
        """
        return self._file_tree

    @file_tree.setter
    def file_tree(self, file_tree):
        """Sets the file_tree of this ProjectRevisionSerializer.


        :param file_tree: The file_tree of this ProjectRevisionSerializer.
        :type file_tree: List[FileVersionSerializer]
        """

        self._file_tree = file_tree

    @property
    def create_at(self):
        """Gets the create_at of this ProjectRevisionSerializer.


        :return: The create_at of this ProjectRevisionSerializer.
        :rtype: str
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this ProjectRevisionSerializer.


        :param create_at: The create_at of this ProjectRevisionSerializer.
        :type create_at: str
        """

        self._create_at = create_at
