# coding: utf-8
#
# Copyright (c) 2020-2021 Hopenly srl.
#
# This file is part of Ilyde.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class ModelVersionSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, source=None, description=None, run_id=None, version=None, current_stage=None, status=None, status_message=None, tags=None, last_updated_timestamp=None, creation_timestamp=None):  # noqa: E501
        """ModelVersionSerializer - a model defined in OpenAPI

        :param name: The name of this ModelVersionSerializer.  # noqa: E501
        :type name: str
        :param source: The source of this ModelVersionSerializer.  # noqa: E501
        :type source: str
        :param description: The description of this ModelVersionSerializer.  # noqa: E501
        :type description: str
        :param run_id: The run_id of this ModelVersionSerializer.  # noqa: E501
        :type run_id: str
        :param version: The version of this ModelVersionSerializer.  # noqa: E501
        :type version: str
        :param current_stage: The current_stage of this ModelVersionSerializer.  # noqa: E501
        :type current_stage: str
        :param status: The status of this ModelVersionSerializer.  # noqa: E501
        :type status: str
        :param status_message: The status_message of this ModelVersionSerializer.  # noqa: E501
        :type status_message: str
        :param tags: The tags of this ModelVersionSerializer.  # noqa: E501
        :type tags: object
        :param last_updated_timestamp: The last_updated_timestamp of this ModelVersionSerializer.  # noqa: E501
        :type last_updated_timestamp: int
        :param creation_timestamp: The creation_timestamp of this ModelVersionSerializer.  # noqa: E501
        :type creation_timestamp: int
        """
        self.openapi_types = {
            'name': str,
            'source': str,
            'description': str,
            'run_id': str,
            'version': str,
            'current_stage': str,
            'status': str,
            'status_message': str,
            'tags': object,
            'last_updated_timestamp': int,
            'creation_timestamp': int
        }

        self.attribute_map = {
            'name': 'name',
            'source': 'source',
            'description': 'description',
            'run_id': 'run_id',
            'version': 'version',
            'current_stage': 'current_stage',
            'status': 'status',
            'status_message': 'status_message',
            'tags': 'tags',
            'last_updated_timestamp': 'last_updated_timestamp',
            'creation_timestamp': 'creation_timestamp'
        }

        self._name = name
        self._source = source
        self._description = description
        self._run_id = run_id
        self._version = version
        self._current_stage = current_stage
        self._status = status
        self._status_message = status_message
        self._tags = tags
        self._last_updated_timestamp = last_updated_timestamp
        self._creation_timestamp = creation_timestamp

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelVersion of this ModelVersionSerializer.  # noqa: E501
        :rtype: ModelVersionSerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ModelVersionSerializer.


        :return: The name of this ModelVersionSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelVersionSerializer.


        :param name: The name of this ModelVersionSerializer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this ModelVersionSerializer.


        :return: The source of this ModelVersionSerializer.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ModelVersionSerializer.


        :param source: The source of this ModelVersionSerializer.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def description(self):
        """Gets the description of this ModelVersionSerializer.


        :return: The description of this ModelVersionSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelVersionSerializer.


        :param description: The description of this ModelVersionSerializer.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def run_id(self):
        """Gets the run_id of this ModelVersionSerializer.


        :return: The run_id of this ModelVersionSerializer.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ModelVersionSerializer.


        :param run_id: The run_id of this ModelVersionSerializer.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def version(self):
        """Gets the version of this ModelVersionSerializer.


        :return: The version of this ModelVersionSerializer.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelVersionSerializer.


        :param version: The version of this ModelVersionSerializer.
        :type version: str
        """

        self._version = version

    @property
    def current_stage(self):
        """Gets the current_stage of this ModelVersionSerializer.


        :return: The current_stage of this ModelVersionSerializer.
        :rtype: str
        """
        return self._current_stage

    @current_stage.setter
    def current_stage(self, current_stage):
        """Sets the current_stage of this ModelVersionSerializer.


        :param current_stage: The current_stage of this ModelVersionSerializer.
        :type current_stage: str
        """

        self._current_stage = current_stage

    @property
    def status(self):
        """Gets the status of this ModelVersionSerializer.


        :return: The status of this ModelVersionSerializer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelVersionSerializer.


        :param status: The status of this ModelVersionSerializer.
        :type status: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ModelVersionSerializer.


        :return: The status_message of this ModelVersionSerializer.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ModelVersionSerializer.


        :param status_message: The status_message of this ModelVersionSerializer.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def tags(self):
        """Gets the tags of this ModelVersionSerializer.


        :return: The tags of this ModelVersionSerializer.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ModelVersionSerializer.


        :param tags: The tags of this ModelVersionSerializer.
        :type tags: object
        """

        self._tags = tags

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ModelVersionSerializer.


        :return: The last_updated_timestamp of this ModelVersionSerializer.
        :rtype: int
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ModelVersionSerializer.


        :param last_updated_timestamp: The last_updated_timestamp of this ModelVersionSerializer.
        :type last_updated_timestamp: int
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ModelVersionSerializer.


        :return: The creation_timestamp of this ModelVersionSerializer.
        :rtype: int
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ModelVersionSerializer.


        :param creation_timestamp: The creation_timestamp of this ModelVersionSerializer.
        :type creation_timestamp: int
        """

        self._creation_timestamp = creation_timestamp
