# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apis_server.serializers.base_model_ import Model
from apis_server import util


class DatasetsListQuerySerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, scope=None, project=None):  # noqa: E501
        """DatasetsListQuerySerializer - a model defined in OpenAPI

        :param id: The id of this DatasetsListQuerySerializer.  # noqa: E501
        :type id: str
        :param name: The name of this DatasetsListQuerySerializer.  # noqa: E501
        :type name: str
        :param scope: The scope of this DatasetsListQuerySerializer.  # noqa: E501
        :type scope: str
        :param project: The project of this DatasetsListQuerySerializer.  # noqa: E501
        :type project: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'scope': str,
            'project': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'scope': 'scope',
            'project': 'project'
        }

        self._id = id
        self._name = name
        self._scope = scope
        self._project = project

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _datasets_list_query of this DatasetsListQuerySerializer.  # noqa: E501
        :rtype: DatasetsListQuerySerializer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DatasetsListQuerySerializer.


        :return: The id of this DatasetsListQuerySerializer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetsListQuerySerializer.


        :param id: The id of this DatasetsListQuerySerializer.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DatasetsListQuerySerializer.


        :return: The name of this DatasetsListQuerySerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetsListQuerySerializer.


        :param name: The name of this DatasetsListQuerySerializer.
        :type name: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this DatasetsListQuerySerializer.


        :return: The scope of this DatasetsListQuerySerializer.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DatasetsListQuerySerializer.


        :param scope: The scope of this DatasetsListQuerySerializer.
        :type scope: str
        """
        allowed_values = ["Local", "Global"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def project(self):
        """Gets the project of this DatasetsListQuerySerializer.


        :return: The project of this DatasetsListQuerySerializer.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DatasetsListQuerySerializer.


        :param project: The project of this DatasetsListQuerySerializer.
        :type project: str
        """

        self._project = project
